using CaseBankdata.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace CaseBankdata.Data
{
    public class CaseBankdataDbContext : DbContext
    {
        //The database in this code-case is hosted on my 2nd pc WLS2, the settings are configured in AppSettings (no env in this code-case) but mounted at runtime
        //in docker-compose
        public CaseBankdataDbContext(DbContextOptions<CaseBankdataDbContext> options)
            : base(options)
        {
        }

        //I included Accounts and Transactions for this code-case, assuming that customers (and their IDs) are managed elsewhere
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Transaction> Transactions { get; set; }

        //Override method to configure specific relationships or other settings
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //Setting ID as pk (since it is an int, it is also autogenerated)
            modelBuilder.Entity<Account>()
                .HasKey(a => a.AccountId);

            //Setting ID as pk (since it is an int, it is also autogenerated)
            modelBuilder.Entity<Transaction>()
                .HasKey(t => t.TransactionId);

            //Ensuring the Enum is stored as string, and enum when retrieved
            modelBuilder.Entity<Transaction>()
                .Property(t => t.TransactionType)
                .HasConversion<string>();

            //Setting one-to-many (one account can have multiple transactions) and setting fk to account id
            modelBuilder.Entity<Transaction>()
                .HasOne<Account>()
                .WithMany()
                .HasForeignKey(t => t.AccountId);
        }
    }
}
